syntax = "proto3";

package cheers.party.v1;

import "cheers/type/party/party.proto";
import "cheers/type/user/user.proto";
import "cheers/type/filter/filter.proto";
import "google/api/annotations.proto";
import "google/protobuf/field_mask.proto";
import "cheers/type/privacy/privacy.proto";
import "cheers/type/pagination/pagination.proto";

option java_multiple_files = true;
option go_package = "github.com/salazarhugo/cheers1/gen/go/cheers/party/v1;party";

service PartyService {
  rpc CreateParty (CreatePartyRequest) returns (CreatePartyResponse) {
    option (google.api.http) = {
      post: "/v1/parties"
      body: "*"
    };
  }

  rpc GetParty (GetPartyRequest) returns (GetPartyResponse) {
    option (google.api.http) = {
      get: "/v1/parties/{party_id}"
    };
  }

  rpc UpsertParty (UpsertPartyRequest) returns (UpsertPartyResponse) {
    option (google.api.http) = {
      put: "/v1/parties"
      body: "*"
    };
  }

  rpc UpdateParty (UpdatePartyRequest) returns (UpdatePartyResponse) {
    option (google.api.http) = {
      patch: "/v1/parties"
      body: "*"
    };
  }

  rpc DeleteParty (DeletePartyRequest) returns (DeletePartyResponse) {
    option (google.api.http) = {
      delete: "/v1/parties/{party_id}"
      body: "*"
    };
  }

  rpc GetPartyItem (GetPartyItemRequest) returns (GetPartyItemResponse) {
    option (google.api.http) = {
      get: "/v1/parties/{party_id}/item"
    };
  }

  rpc FeedParty (FeedPartyRequest) returns (FeedPartyResponse) {
    option (google.api.http) = {
      get: "/v1/parties/feed"
    };
  }

  /*
    List parties of a specific user
   */
  rpc ListParty (ListPartyRequest) returns (ListPartyResponse) {
    option (google.api.http) = {
      get: "/v1/parties/{user_id}/list"
    };
  }

  rpc AnswerParty (AnswerPartyRequest) returns (AnswerPartyResponse) {
    option (google.api.http) = {
      post: "/v1/parties/{party_id}/answer"
      body: "*"
    };
  }

  rpc ListInterested (ListInterestedRequest) returns (ListInterestedResponse) {
    option (google.api.http) = {
      get: "/v1/parties/{party_id}/interested"
    };
  }

  rpc ListGoing (ListGoingRequest) returns (ListGoingResponse) {
    option (google.api.http) = {
      get: "/v1/parties/{party_id}/going"
    };
  }

  rpc TransferParty (TransferPartyRequest) returns (TransferPartyResponse) {
    option (google.api.http) = {
      post: "/v1/parties/{party_id}/transfer"
      body: "*"
    };
  }

  rpc DuplicateParty (DuplicatePartyRequest) returns (DuplicatePartyResponse) {
    option (google.api.http) = {
      post: "/v1/parties/{party_id}/duplicate"
      body: "*"
    };
  }
}

message DuplicatePartyRequest {
  string party_id = 1;
}

message DuplicatePartyResponse {
}

message TransferPartyRequest {
  string user_id = 1;
  string party_id = 2;
}

message TransferPartyResponse {
}

message ListPartyRequest {
  cheers.type.PaginationRequest pagination = 1;
  string user_id = 3;
  string filter = 4;
}

message ListPartyResponse {
  repeated PartyItem items = 1;
  cheers.type.PaginationResponse pagination = 2;
  repeated cheers.type.Filter filters = 3;
}

message ListInterestedRequest {
  string party_id = 1;
  cheers.type.PaginationRequest pagination = 2;
}

message ListInterestedResponse {
  repeated cheers.type.UserItem users = 1;
}

message ListGoingRequest {
  string party_id = 1;
  cheers.type.PaginationRequest pagination = 2;
}

message ListGoingResponse {
  repeated cheers.type.UserItem users = 1;
}

message AnswerPartyRequest {
  string party_id = 1;
  WatchStatus watch_status = 2;
}

message AnswerPartyResponse {
}

message CreatePartyRequest {
  string name = 1;
  string description = 2;
  Geolocation geolocation = 3;
  cheers.type.Privacy privacy = 4;
  string banner_url = 5;
  int64 start_date = 6;
  int64 end_date = 7;
  string location_name = 10;
  repeated string lineup = 11;
  repeated string music_genres = 12;
  bool hide_guest_list = 13;
}

message Geolocation {
  string city = 1;
  string address = 2;
  double latitude = 3;
  double longitude = 4;
}

message CreatePartyResponse {
  PartyItem item = 1;
}

message GetPartyRequest {
  string party_id = 1;
}

message GetPartyResponse {
  cheers.type.Party party = 1;
}

message GetPartyItemRequest {
  string party_id = 1;
}

message GetPartyItemResponse {
  PartyItem item = 1;
}

message UpsertPartyRequest {
  cheers.type.Party party = 1;
}

message UpsertPartyResponse {
  cheers.type.Party party = 1;
}

message UpdatePartyRequest {
  optional google.protobuf.FieldMask update_mask = 1;
  string party_id = 2;
  string name = 3;
  string description = 4;
  string address = 5;
  string banner_url = 6;
  int64 start_date = 7;
  int64 end_date = 8;
  string location_name = 9;
  double latitude = 10;
  double longitude = 11;
  string city = 12;
  repeated string lineup = 13;
  repeated string music_genres = 14;
}

message UpdatePartyResponse {
  cheers.type.Party party = 1;
}

message DeletePartyRequest {
  string party_id = 1;
}

message DeletePartyResponse {
}

message FeedPartyRequest {
  string parent = 1;
  cheers.type.PaginationRequest pagination = 2;
  string city = 4;
}

message FeedPartyResponse {
  repeated PartyItem items = 1;
  string next_page_token = 2;
  int32 total_page = 3;
}

message PartyItem {
  cheers.type.Party party = 1;
  cheers.type.User user = 2;
  int64 going_count = 3;
  int64 interested_count = 4;
  int64 invited_count = 5;
  bool is_creator = 8;
  WatchStatus viewer_watch_status = 9;
  repeated cheers.type.User mutual_going = 10;
  repeated cheers.type.User mutual_interested = 11;
}

enum WatchStatus {
  UNWATCHED = 0;
  GOING = 1;
  INTERESTED = 2;
  MAYBE = 3;
}
