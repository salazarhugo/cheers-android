syntax = "proto3";

package cheers.chat.v1;


import "cheers/type/user/user.proto";
import "google/api/annotations.proto";
import "cheers/type/audio/audio.proto";

option java_multiple_files = true;
option go_package = "github.com/salazarhugo/cheers1/gen/go/cheers/chat/v1;chat";

service ChatService {
  rpc CreateRoom(CreateRoomRequest) returns (CreateRoomResponse) {
    option (google.api.http) = {
      post: "/v1/chats"
      body: "*"
    };
  }

  rpc JoinRoom(JoinRoomRequest) returns (stream Message) {}

  rpc GetInbox(GetInboxRequest) returns (GetInboxResponse) {
    option (google.api.http) = {
      get: "/v1/chats/inbox"
    };
  }

  rpc ListRoomMessages(ListRoomMessagesRequest) returns (ListRoomMessagesResponse) {
    option (google.api.http) = {
      get: "/v1/chats/{room_id}/messages"
    };
  }

  rpc DeleteRoom(DeleteRoomRequest) returns (DeleteRoomResponse) {
    option (google.api.http) = {
      delete: "/v1/chats/{room_id}"
      body: "*"
    };
  }

  rpc GetRoomId(GetRoomIdReq) returns (RoomId) {}
  rpc ListMembers(ListMembersRequest) returns (ListMembersResponse) {}
  rpc LeaveRoom(RoomId) returns (Empty) {}

  rpc SendReadReceipt(SendReadReceiptRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/v1/chats/{room_id}/read"
      body: "*"
    };
  }

  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {
    option (google.api.http) = {
      post: "/v1/chats/{room_id}/send"
      body: "*"
    };
  }

  rpc PinRoom(PinRoomRequest) returns (PinRoomResponse) {
    option (google.api.http) = {
      put: "/v1/chats/{room_id}/pin"
      body: "*"
    };
  }

  rpc UnPinRoom(UnPinRoomRequest) returns (UnPinRoomResponse) {
    option (google.api.http) = {
      put: "/v1/chats/{room_id}/unpin"
      body: "*"
    };
  }

  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse) {
    option (google.api.http) = {
      delete: "/v1/chats/{room_id}/messages/{message_id}"
      body: "*"
    };
  }

  rpc LikeMessage(LikeMessageReq) returns (Empty) {}
  rpc UnlikeMessage(LikeMessageReq) returns (Empty) {}
  rpc TypingChannel(stream TypingEvent) returns (stream TypingEvent) {}
  rpc TypingStart(TypingReq) returns (Empty) {}
  rpc TypingEnd(TypingReq) returns (Empty) {}

  rpc AddToken(AddTokenReq) returns (Empty) {}
  rpc DeleteUser(UserIdReq) returns (Empty) {}
}

message PinRoomRequest {
  string room_id = 1;
}

message PinRoomResponse {
}

message UnPinRoomResponse {
}

message UnPinRoomRequest {
  string room_id = 1;
}

message SendReadReceiptRequest {
  string room_id = 1;
}

message DeleteMessageRequest {
  string message_id = 1;
  string room_id = 2;
}

message DeleteMessageResponse {
}

message SendMessageRequest {
  string text = 1;
  string room_id = 2;
  string reply_to = 3;
  string client_id = 4;
  repeated string media_ids = 5;
  cheers.type.Audio audio = 6;
  oneof attachment {
    string post_id = 7;
    string party_id = 8;
    string note_id = 9;
    string user_id = 10;
  }
}

message SendMessageResponse {
  Message message = 1;
}

message GetInboxRequest {
  int32 page = 1;
  int32 page_size = 2;
}

message GetInboxResponse {
  repeated RoomWithMessages inbox = 1;
}

message DeleteRoomRequest {
  string room_id = 1;
}

message DeleteRoomResponse {
}

message TypingEvent {
  string room_id = 1;
  string user_id = 2;
  enum Type {
    START = 0;
    STOP = 1;
  }
  Type type = 3;
}

message CreateRoomRequest {
  string group_name = 1;
  repeated string recipient_users = 2;
}

message CreateRoomResponse {
  Room room = 1;
}

message ListRoomMessagesRequest {
  string room_id = 1;
  int32 page_size = 2;
  int32 page = 3;
}

message ListRoomMessagesResponse {
  repeated MessageItem messages = 1;
}

message ListRoomRequest {
  int32 page_size = 2;
  int32 page = 3;
}

message ListRoomResponse {
  repeated Room rooms = 1;
}

message ListMembersRequest {
  string room_id = 1;
  int32 page_size = 2;
  int32 page = 3;
}

message ListMembersResponse {
  repeated cheers.type.UserItem users = 1;
}

message UserIdReq {
  string userId = 1;
}

message Empty {
}

message AddTokenReq {
  string token = 1;
}

message TypingReq {
  string room_id = 1;
  string username = 2;
  string avatar_url = 3;
}

message JoinRoomRequest {
  string room_id = 1;
}

message RoomId {
  string room_id = 1;
}

message GetRoomIdReq {
  string recipient_id = 1;
}

enum RoomStatus {
  EMPTY = 0;
  OPENED = 1;
  SENT = 2;
  RECEIVED = 3;
  NEW = 4;
}

enum RoomType {
  DIRECT = 0;
  GROUP = 1;
}

message RoomWithMessages {
  Room room = 1;
  repeated MessageItem messages = 2;
}

message Room {
  string id = 1;
  string name = 2;
  bool verified = 4;
  bool typing = 3;
  string owner = 5;
  RoomType type = 6;
  RoomStatus status = 8;
  repeated string admins = 9;
  repeated string members = 10;
  string last_message_text = 11;
  string picture = 12;
  MessageType last_message_type = 13;
  int64 create_time = 14;
  int64 last_message_time = 15;
  bool archived = 16;
  bool last_message_seen = 17;
  int64 unread_message_count = 18;
  bool admin = 19;
  int64 members_count = 20;
  // if chat is DIRECT then it's the other user id
  string other_user_id = 21;
}

enum MessageType {
  TEXT = 0;
  IMAGE = 1;
  VIDEO = 2;
}

message LikeMessageReq {
  string room_id = 1;
  string message_id = 2;
}

message Message {
  string id = 1;
  string room_id = 2;
  string text = 3;
  string picture = 4;
  string sender_id = 5;
  string sender_picture = 6;
  string sender_name = 7;
  string sender_username = 8;
  int32 like_count = 9;
  MessageType type = 10;
  enum Status {
    EMPTY = 0;
    SENT = 1;
    DELIVERED = 2;
    READ = 3;
    FAILED = 4;
  }
  Status status = 11;
  int64 create_time = 12;
  Message reply_to = 13;
  repeated Media medias = 14;
  cheers.type.Audio audio = 15;
}

message Media {
  string accessibility_caption = 1;
  MediaType media_type = 2;
  repeated ImageVersion image_versions = 3;
}

message ImageVersion {
  string url = 1;
  string ref = 2;
  int64 width = 3;
  int64 height = 4;
}

enum MediaType {
  MEDIA_IMAGE = 0;
  MEDIA_VIDEO = 1;
}

message MessageItem {
  Message message = 1;
  bool sender = 2;
  bool liked = 3;
}
